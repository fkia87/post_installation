[Unit]
#Description=
#Documentation=
#Requires= This directive lists any units upon which this unit essentially depends. If the current unit is activated, the units listed here must successfully activate as well, else this unit will fail. These units are started in parallel with the current unit by default.
#Wants= This directive is similar to Requires=, but less strict. Systemd will attempt to start any units listed here when this unit is activated. If these units are not found or fail to start, the current unit will continue to function.
#BindsTo= This directive is similar to Requires=, but also causes the current unit to stop when the associated unit terminates.
#Before= The units listed in this directive will not be started until the current unit is marked as started if they are activated at the same time.
#After= The units listed in this directive will be started before starting the current unit.
#Conflicts= This can be used to list units that cannot be run at the same time as the current unit. Starting a unit with this relationship will cause the other units to be stopped.
#Condition...=
#Assert...=

[Install]
# The directives within dictate what should happen when the unit is enabled.
#WantedBy=
#RequiredBy=
#Alias= This directive allows the unit to be enabled under another name as well.
#Also= This directive allows units to be enabled or disabled as a set. Supporting units that should always be available when this unit is active can be listed here. They will be managed as a group for installation tasks.
#DefaultInstance= For template units (covered later) which can produce unit instances with unpredictable names, this can be used as a fallback value for the name if an appropriate name is not provided.

# Unit-Specific Directives:
[Service]
#Type= simple|exec|forking|oneshot|dbus|notify|notify-reload|idle
#RemainAfterExit= This directive is commonly used with the oneshot type. It indicates that the service should be considered active even after the process exits.
#PIDFile= If the service type is marked as “forking”, this directive is used to set the path of the file that should contain the process ID number of the main child that should be monitored.
#BusName= This directive should be set to the D-Bus bus name that the service will attempt to acquire when using the “dbus” service type.
#NotifyAccess= This specifies access to the socket that should be used to listen for notifications when the “notify” service type is selected This can be “none”, “main”, or "all. The default, “none”, ignores all status messages. The “main” option will listen to messages from the main process and the “all” option will cause all members of the service’s control group to be processed.
#ExecStartPre= This can be used to provide additional commands that should be executed before the main process is started. This can be used multiple times. Again, commands must specify a full path and they can be preceded by “-” to indicate that the failure of the command will be tolerated.
#ExecStart= This may only be specified once (except for “oneshot” services). If the path to the command is preceded by a dash “-” character, non-zero exit statuses will be accepted without marking the unit activation as failed.
#ExecStartPost= This has the same exact qualities as ExecStartPre= except that it specifies commands that will be run after the main process is started.
#ExecReload= This optional directive indicates the command necessary to reload the configuration of the service if available.
#ExecStop= This indicates the command needed to stop the service. If this is not given, the process will be killed immediately when the service is stopped.
#ExecStopPost= This can be used to specify commands to execute following the stop command.
#Restart= always|on-success|on-failure|on-abnormal|on-abort|on-watchdog
#RestartSec= If automatically restarting the service is enabled, this specifies the amount of time to wait before attempting to restart the service.
#TimeoutSec= This configures the amount of time that systemd will wait when stopping or stopping the service before marking it as failed or forcefully killing it. You can set separate timeouts with TimeoutStartSec= and TimeoutStopSec= as well.

# Special variables
# $MAINPIPD: PID of the main process

# Important unit specifiers
#%n: Full unit name
#%p: Prefix name
#%i: Instance name (Is the part of the instantiated unit name between the "@" character and the type suffix. %I has the same meaning but also replaces the forbidden characters for ASCII codes.)
#%H: Stands for the hostname of the running system at the point in time the unit configuration is loaded.
#%t: Represents the runtime directory, which is either /run for the root user, or the value of the XDG_RUNTIME_DIR variable for unprivileged users.
#%a: Architecture (x86,x86-64,arm64,...)
