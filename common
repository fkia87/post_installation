# shellcheck disable=SC2148,SC2317

config_journald() {
    echo -e "${BLUE}\nConfiguring \"journald\"...${DECOLOR}"
    sed -i '/^Storage=volatile/d' /etc/systemd/journald.conf
    echo -e "Storage=volatile" >> /etc/systemd/journald.conf
    #systemctl restart systemd-journald
    # shellcheck disable=SC2034
    REBOOT=1
}

get_target_user() {
    while [[ -z $targetuser ]] || ! grep 'bash$' /etc/passwd | \
        awk -F ':' '{print$1}' | grep -q ^"$targetuser"$ 2>/dev/null; do
        echo -e "${BLUE}\nEnter your target Linux username:${DECOLOR}"
        read -r targetuser
        if [[ $targetuser == "root" ]]; then
            targethome=/$targetuser
        else
            targethome=/home/"$targetuser"
        fi
    done
}

create_dirs() {
    echo -e "${BLUE}\nCreating directories in \"$targethome\"...${DECOLOR}"
    install -d -o "$targetuser" -g "$targetuser" \
        "$targethome"/{.fonts,.themes,bin,Applications,.icons,.ssh}
}

set_qt_scale_2 () {
    sed -i '/export QT_SCALE_FACTOR=2/d' "$targethome"/.bash_profile
    echo "export QT_SCALE_FACTOR=2" >> "$targethome"/.bash_profile
    # shellcheck disable=SC2034
    REBOOT=1
}

config_ssh() {
    echo -e "${BLUE}\nConfiguring \"SSH\"...${DECOLOR}"
    cp /etc/ssh/ssh_config{,.bak}
    echo -e "${BBLUE}\nEnter your SSH private key password:\n${DECOLOR}"
    while ! gpg --pinentry-mode loopback -o configurations/ssh/id_rsa \
        --decrypt configurations/ssh/encrypted_key; do
        sleep 1
    done
    install -o "$targetuser" -g "$targetuser" ./configurations/ssh/* "$targethome"/.ssh
    chmod 700 "$targethome"/.ssh
    chmod 644 "$targethome"/.ssh/id_rsa.pub
    chmod 600 "$targethome"/.ssh/id_rsa
    sed -i '/^ServerAliveInterval/d' /etc/ssh/ssh_config
    sed -i '/^StrictHostKeyChecking/d' /etc/ssh/ssh_config
    cat << EOF >> /etc/ssh/ssh_config
    ServerAliveInterval 60
    StrictHostKeyChecking no
EOF
}

config_hosts() {
    sed -i '/# POST INSTALLATION/Q' /etc/hosts \
        && cat ./configurations/hosts >> /etc/hosts
}

install_scripts() {
    echo -e "${BLUE}\nInstalling scripts...${DECOLOR}"
    install -m 755 -o "$targetuser" -g "$targetuser" ./scripts/* "$targethome"/bin/
}

install_fonts() {
    echo -e "${BLUE}\nInstalling fonts...${DECOLOR}"
    cp -r ./fonts/* "$targethome"/.fonts/
    chown -R "$targetuser":"$targetuser" "$targethome"/.fonts/*
}

config_proxy() {
    ask "You should configure ssh keys first. Continue?" "config_ssh"
    echo -e "${BLUE}\nConfiguring VPN proxy services...${DECOLOR}"
    while IFS= read -r service
    do
        cp "$service" /etc/systemd/system/
        systemctl daemon-reload
        systemctl enable "${service##*/}" --now 2>/dev/null && \
        echo -e "${GREEN}\nStarted \"${service##*/}\" successfully.${DECOLOR}"
    done < <(find ./configurations/ -name '*proxy.service')
}

config_grub() {
        case $(os) in
        fedora)
            echo -e "${BLUE}\nUpdating kernel parameters...${DECOLOR}"
            grubby --update-kernel ALL --args "selinux=0 pcie_aspm=off"
            echo -e "${BLUE}Turning \"SELinux\" off...${DECOLOR}"
            setenforce 0
            ;;
        manjaro | ubuntu | debian)
            echo -e "${BLUE}\nUpdating kernel parameters...${DECOLOR}"
            cp /etc/default/grub{,.bak}
            sed -i 's/^GRUB_CMDLINE_LINUX=""/GRUB_CMDLINE_LINUX="pcie_aspm=off"/' /etc/default/grub
            update-grub 2>/dev/null
            ;;
    esac
    # shellcheck disable=SC2034
    REBOOT=1
}

useful_packages() {
    case $(os) in
        fedora | manjaro)
            pkg_to_install+=(lsd unrar)
            ;;
        ubuntu | debian)
            snap install lsd
            ;;
    esac
    pkg_to_install+=(duf bat curl colorized-logs)

    # shellcheck disable=SC2068
    install_pkg ${pkg_to_install[@]}
}

strt_msg() {
    echo -e "${BOLD}\n###### Starting post installation script for \"$(os)\" ######\n${DECOLOR}"
}

config_goflex() {
    echo -e "${BLUE}\nConfiguring \"GoFlex\" auto mount...${DECOLOR}"
    blkid | grep e0886b21-1596-4626-b131-2137ec7394fa || \
        { echo -e "${RED}\"GoFlex\" not found.${DECOLOR}"; return 2; }
    install -d -o "$targetuser" -g "$targetuser" "$targethome"/GoFlex
    cp /etc/fstab{,.bak}
    sed -i '/UUID=e0886b21-1596-4626-b131-2137ec7394fa/d' /etc/fstab
    cat configurations/fstab >> /etc/fstab
    systemctl daemon-reload
    mount -a
}

passwordless_sudo() {
    cp configurations/99-sudoers /etc/sudoers.d/
}

finish_msg() {
    echo -e "${GREEN}\nFinished configuring system.${DECOLOR}"
    [[ "$REBOOT" == "1" ]] && \
        echo -e "${GREEN}It is recommended to restart your computer.\n${DECOLOR}"
}
