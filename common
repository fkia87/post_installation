# shellcheck disable=SC2148,SC2317
# cSpell: disable

config_journald() {
    echo -e "${BLUE}Configuring \"journald\"...${DECOLOR}"
    sed -i '/^Storage=volatile/d' /etc/systemd/journald.conf
    echo -e "Storage=volatile" >> /etc/systemd/journald.conf
    #systemctl restart systemd-journald
    # shellcheck disable=SC2034
    REBOOT=1
}

get_target_user() {
    while [[ -z $targetuser ]] || ! grep 'bash$' /etc/passwd | \
        awk -F ':' '{print$1}' | grep -q ^"${targetuser:-fkia}"$ 2>/dev/null; do
        read -r -p "Enter your target Linux username [fkia]: " targetuser
        targetuser=${targetuser:-fkia}
        case "$targetuser" in
            root)
                targethome=/$targetuser
                ;;
            * )
                targethome=/home/"$targetuser"
                ;;
        esac
        export targetuser
        export targethome
    done
}

create_dirs() {
    echo -e "${BLUE}Creating directories in \"$targethome\"...${DECOLOR}"
    groupadd -U "$targetuser" "$targetuser" 2> /dev/null || :
    install -d -o "$targetuser" -g "$targetuser" \
        "$targethome"/{.fonts,.themes,bin,Applications,.icons,.ssh,.config/terminator}
}

config_bashrc() {
    echo -e "${BLUE}Configuring \"bashrc\"...${DECOLOR}"
    case $(os) in
        manjaro | ubuntu | debian)
            BASHRC="/etc/bash.bashrc"
            ;;
        fedora | centos | almalinux | rocky)
            BASHRC="/etc/bashrc"
            ;;
    esac
    sed -i '/^alias ll/d' "$targethome"/.bashrc
    sed -i '/# POST INSTALLATION/Q' "$BASHRC" \
        && cat ./configurations/bashrc-{common,"$(os)"} >> "$BASHRC" 2> /dev/null
}

set_qt_scale_2 () {
    sed -i '/export QT_SCALE_FACTOR=2/d' "$targethome"/.bash_profile
    echo "export QT_SCALE_FACTOR=2" >> "$targethome"/.bash_profile
    # shellcheck disable=SC2034
    REBOOT=1
}

config_terminator() {
    install -m 644 -o "$targetuser" -g "$targetuser" configurations/terminator.config \
        "$targethome"/.config/terminator/config
}

install_ssh_config() {
    install -o "$targetuser" -g "$targetuser" -m 644 ./configurations/ssh/config "$targethome"/.ssh && \
        echo -e "${BLUE}Removing known SSH hosts...${DECOLOR}" && \
        rm -f "$targethome"/.ssh/known_hosts 2> /dev/null
}

config_ssh() {
    set -x
    echo -e "${BLUE}Configuring \"SSH\"...${DECOLOR}"
    cp /etc/ssh/ssh_config{,.bak}
    echo -e "${BBLUE}Enter your SSH private key password:${DECOLOR}"
    read -rs password
    for keyfile in configurations/ssh/*id_rsa; do
        echo -e "Decrypting $keyfile..."
        filename="${keyfile##*/}"
        # decrypted identity file would be 'id_rsa' for my key and '<user>_id_rsa'
        # for other users keys
        # Encrypted using this command:
        # gpg --symmetric -o [<user>_]encrypted_key /path/to/ssh_rsa_file
        while ! gpg --batch --yes --passphrase "$password" \
            -o "$targethome/.ssh/$filename" \
            --decrypt "$keyfile"; do
            sleep 1
        done
        chown "$targetuser":"$targetuser" "$targethome/.ssh/$filename"
        chmod 600 "$targethome/.ssh/$filename"
    done
    unset password filename
    install -o "$targetuser" -g "$targetuser" -m 644 ./configurations/ssh/*.pub "$targethome"/.ssh
    chmod 700 "$targethome"/.ssh
    sed -i '/^ServerAliveInterval/d' /etc/ssh/ssh_config
    sed -i '/^StrictHostKeyChecking/d' /etc/ssh/ssh_config
    cat << EOF >> /etc/ssh/ssh_config
    ServerAliveInterval 60
    StrictHostKeyChecking no
EOF
    install_ssh_config
    set +x
}

config_hosts() {
    echo -e "${BLUE}Updating /etc/hosts...${DECOLOR}"
    sed -i '/# POST INSTALLATION/Q' /etc/hosts \
        && cat ./configurations/hosts >> /etc/hosts
}

install_scripts() {
    echo -e "${BLUE}Installing scripts...${DECOLOR}"
    destination=/usr/local/bin
    install -m 755 -o "$targetuser" -g "$targetuser" ./scripts/* "$destination"
}

install_templates() {
    [[ -d "$targethome"/Templates/ ]] || \
        { echo -e "No \"Templates\" directory found in $targethome." >&2; return 1; }
    install -o "$targetuser" -g "$targetuser" ./Templates/* "$targethome"/Templates/
}

install_fonts() {
    echo -e "${BLUE}Installing fonts...${DECOLOR}"
    cp -r ./fonts/* "$targethome"/.fonts/
    chown -R "$targetuser":"$targetuser" "$targethome"/.fonts/*
}

config_proxy() {
    ask "You should configure ssh keys first. Continue?" "config_ssh"
    echo -e "${BLUE}Configuring VPN proxy services...${DECOLOR}"
    while IFS= read -r service
    do
        # cp "$service" /etc/systemd/system/
        envsubst < "$service" > /etc/systemd/system/"${service##*/}"
        systemctl daemon-reload
        systemctl enable "${service##*/}" --now 2>/dev/null && \
        echo -e "${GREEN}Started \"${service##*/}\" successfully.${DECOLOR}"
    done < <(find ./configurations/ -name '*proxy.service')
}

config_grub() {
        case $(os) in
        fedora | rocky)
            echo -e "${BLUE}Updating kernel parameters...${DECOLOR}"
            grubby --update-kernel ALL --args "selinux=0 pcie_aspm=off"
            echo -e "${BLUE}Turning \"SELinux\" off...${DECOLOR}"
            setenforce 0
            ;;
        manjaro | ubuntu | debian)
            echo -e "${BLUE}Updating kernel parameters...${DECOLOR}"
            cp /etc/default/grub{,.bak}
            sed -i 's/^GRUB_CMDLINE_LINUX=""/GRUB_CMDLINE_LINUX="pcie_aspm=off"/' /etc/default/grub
            update-grub 2>/dev/null
            ;;
    esac
    # shellcheck disable=SC2034
    REBOOT=1
}

useful_packages() {
    case $(os) in
        fedora | manjaro)
            pkg_to_install+=(unrar xbanish btop fping duf colorized-logs lsd)
            ;;
        ubuntu | debian)
            pkg_to_install+=(fping duf colorized-logs lsd)
            ;;
        rocky)
            pkg_to_install+=(unrar xbanish btop fping)
            ;;
    esac
    pkg_to_install+=(bat curl)

    # shellcheck disable=SC2068
    install_pkg ${pkg_to_install[@]}
}

install_nekoray_routes() {
    echo -e "${BLUE}Installing \"Nekoray\" routes...${DECOLOR}"
    local dest="$targethome"/Applications/nekoray/config/routes_box
    if [[ -d "$dest" ]]; then
        install -m 644 configurations/my_nekoray_routes "$dest"
    else
        echo -en "${YELLOW}Directory \"$dest\" not found \"Nekoray\""
        echo -e " probably is not installed.${DECOLOR}"
    fi
}

strt_msg() {
    echo -e "${BOLD}###### Starting post installation script for \"$(os)\" ######${DECOLOR}"
}

config_goflex() {
    echo -e "${BLUE}Configuring \"GoFlex\" auto mount...${DECOLOR}"
    blkid | grep e0886b21-1596-4626-b131-2137ec7394fa || \
        { echo -e "${RED}\"GoFlex\" not found.${DECOLOR}"; return 2; }
    install -d -o "$targetuser" -g "$targetuser" "$targethome"/GoFlex
    cp /etc/fstab{,.bak}
    sed -i '/UUID=e0886b21-1596-4626-b131-2137ec7394fa/d' /etc/fstab
    cat configurations/fstab >> /etc/fstab
    systemctl daemon-reload
    mount -a
}

autostart_xbanish() {
    autostart_dir="$targethome/.config/autostart"
    mkdir -p "$autostart_dir"
    cp ./configurations/xbanish.desktop "$autostart_dir"
}

passwordless_sudo() {
    cp configurations/99-sudoers /etc/sudoers.d/
}

finish_msg() {
    echo -e "${GREEN}Finished configuring system.${DECOLOR}"
    [[ "$REBOOT" == "1" ]] && \
        echo -e "${GREEN}It is recommended to restart your computer.${DECOLOR}"
}

_configure_krew() {
    sudo -E -u "$targetuser" ./configure_krew.sh
    command -v fzf > /dev/null || install_pkg fzf
    config_bashrc
}

kubernetes_stuff() {
    echo -e "${BLUE}Configuring \"Kubernetes\" client...${DECOLOR}"
    
    echo -e "Checking the installation of \"kubectl\"..."
    command -v kubectl > /dev/null || install_pkg kubectl

    echo -e "Configuring \"Krew\" and its plugins..."
    _configure_krew
    # export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"
    
    echo -e "Copying kubectl aliases..."
    cp -f configurations/kubectl_aliases.txt "$targethome"
    
    echo -e "Updating user's \"bashrc\"..."
    sed -i '/# POST INSTALLATION/Q' "$targethome"/.bashrc
    cat << EOF >> "$targethome"/.bashrc
# POST INSTALLATION
source ~/kubectl_aliases.txt
export KUBECONFIG=\$(find $targethome/.kube/kubeconfig-* | paste -sd ":" -)
export KUBECONFIG=\$KUBECONFIG:$targethome/.kube/config
EOF
}