# POST INSTALLATION
# shellcheck disable=SC2148,SC2034
# shellcheck source=/dev/null
if [ -f /usr/share/bash-completion/completions/git ]; then
    source /usr/share/bash-completion/completions/git
fi

# This section is for 'bash-git-prompt' if you install it
if [ -f "$HOME/.bash-git-prompt/gitprompt.sh" ]; then
    GIT_PROMPT_ONLY_IN_REPO=1
	# GIT_PROMPT_FETCH_REMOTE_STATUS=0   # uncomment to avoid fetching remote status
	# GIT_PROMPT_IGNORE_SUBMODULES=1 # uncomment to avoid searching for changed files in submodules
	# GIT_PROMPT_WITH_VIRTUAL_ENV=0 # uncomment to avoid setting virtual environment infos for node/python/conda environments
	# GIT_PROMPT_VIRTUAL_ENV_AFTER_PROMPT=1 # uncomment to place virtual environment infos between prompt and git status (instead of left to the prompt)
	
	# GIT_PROMPT_SHOW_UPSTREAM=1 # uncomment to show upstream tracking branch
	# GIT_PROMPT_SHOW_UNTRACKED_FILES=normal # can be no, normal or all; determines counting of untracked files
	
	# GIT_PROMPT_SHOW_CHANGED_FILES_COUNT=0 # uncomment to avoid printing the number of changed files
	
	# GIT_PROMPT_STATUS_COMMAND=gitstatus_pre-1.7.10.sh # uncomment to support Git older than 1.7.10
	
	# GIT_PROMPT_START=...    # uncomment for custom prompt start sequence
	# GIT_PROMPT_END=...      # uncomment for custom prompt end sequence
	
	# as last entry source the gitprompt script
	# GIT_PROMPT_THEME=Custom # use custom theme specified in file GIT_PROMPT_THEME_FILE (default ~/.git-prompt-colors.sh)
	# GIT_PROMPT_THEME_FILE=~/.git-prompt-colors.sh
	# GIT_PROMPT_THEME=Solarized # use theme optimized for solarized color scheme
    source "$HOME/.bash-git-prompt/gitprompt.sh"
fi

ex() {
	if [ -f "$1" ] ; then
		case $1 in
			*.tar.bz2)   tar xvjf "$1"     ;;
			*.tar.gz)    tar xvzf "$1"     ;;
			*.bz2)       bunzip2 "$1"      ;;
			*.rar)       unrar x "$1"      ;;
			*.gz)        gunzip "$1"       ;;
			*.tar)       tar xvf "$1"      ;;
			*.tbz2)      tar xvjf "$1"     ;;
			*.tgz)       tar xvzf "$1"     ;;
			*.zip)       unzip "$1"        ;;
			*.Z)         uncompress "$1"   ;;
			*.7z)        7z x "$1"         ;;
			*)           echo "$1 cannot be extracted via >extract<" ;;
		esac
	else
		echo "'$1' is not a valid file!"
	fi
}

rcp() {
	case $1 in
		-h | --help)
			echo "An alternative to 'scp'"
			echo "Copy files or directories to/from a remote host using 'rsync'."
			echo "Usage:"
			echo "  rcp [-p <SSH port>] path/to/local [user@]<remote>:"
			echo "  rcp [-p <SSH port>] [user@]<remote>: path/to/local"
			return
			;;
		-p | --port | --ssh-port)
			local ssh_option="-p $2"
			shift 2
			;;
		-p*)
			# In case you gave port without spaces like -p4141
			local ssh_option="$1"
			shift
			;;
	esac
	rsync -avPz -e "ssh ${ssh_option}" "$@"
}

addhost() {
	case $1 in
		-h | --help)
			echo "Add a host to '/etc/hosts'"
			echo "Usage:"
			echo "  addhost <IP_ADDRESS> <HOSTNAME>"
			return
			;;
	esac
	[[ $# -ne 2 ]] && { echo "This function requires two arguments." >&2; return 1; }
	echo "$1 $2" | sudo tee -a /etc/hosts
}

removehost() {
	case $1 in
		-h | --help)
			echo "Remove a host from '/etc/hosts'"
			echo "Usage:"
			echo "  removehost <IP_ADDRESS> <HOSTNAME>"
			return
			;;
	esac
	[[ $# -ne 2 ]] && { echo "This function requires two arguments." >&2; return 1; }
	sudo sed -i "/^$1\s*$2/d" /etc/hosts
}

digg() {
	local domain="$1"
	local types=(A AAAA CNAME MX NS TXT SOA SRV PTR SPF)
	resolvectl flush-caches > /dev/null 2>&1
	for type in "${types[@]}"; do
    	dig +noall +answer +timeout=3 +retry=0 "$domain" "$type" || return 1
	done
}
# Since you may want to use this in a 'watch' command
export -f digg

wttr() {
	curl wttr.in/"$1"
}

calc() {
	awk "BEGIN{ print $* }"
}

gp() {
	if ! command -v git > /dev/null 2>&1; then
		echo "git: Command not found."
		return 1
	fi
	for remote in $(git remote); do
		echo -e "\nPushing into ${remote}..."
		git push "$remote"
	done
}

# krew
export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

# better bash -x output
export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

# better bash completion
bind "set completion-ignore-case on" 2> /dev/null
bind "set completion-map-case on" 2> /dev/null
bind "set show-all-if-ambiguous on" 2> /dev/null

alias sudo='sudo '
alias mtr='mtr -b '
alias +x='chmod +x'
alias pokemon='curl pkmn.li'
alias pkmn='pokemon'
alias weather='wttr'
alias weather_in='wttr'
alias ip='ip -c -h -p'
alias sl='systemctl -T '
alias sls='sl status'
alias slr='sl restart'
alias h='head '
alias t='tail '
alias ping='ping -OD '
alias jctl='journalctl '
#alias cp='rsync -ahR --info=progress2 '
alias myip='curl -S eth0.me '
# Other options be like:
# INLINE:
#    l2.io/ip
#    https://echoip.de
#    ifconfig.me
#    ipecho.net/plain
#    -L ident.me
#    -L canihazip.com/s
#    -L tnx.nl/ip
#    wgetip.com
#    whatismyip.akamai.com
#    ip.tyk.nu
#    bot.whatismyipaddress.com
#    curlmyip.net
#    api.ipify.org
#    ipv4bot.whatismyipaddress.com
#    ipcalf.com
# NEWLINE:
#    ipaddy.net
#    eth0.me
#    ipaddr.site
#    ifconfig.co
#    ifconfig.pro
#    curlmyip.net
#    ipinfo.io/ip
#    icanhazip.com
#    checkip.amazonaws.com
#    smart-ip.net/myip
#    ip-api.com/line?fields=query
#    ifconfig.io/ip
#    -s ip.liquidweb.com
#    ifconfig.es
#    ipaddress.sh
#    2ip.ru
alias externalip='myip '
alias publicip='myip '
alias speedtest='curl -s \
	https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python - '

# Container tools
alias d='docker'
alias p='podman'
alias dc='docker compose'
alias pc='podman compose'
alias pclogs='podman compose logs -fn'
alias plogs='podman logs -fn'
alias dclogs='docker compose logs -f'
alias dlogs='docker logs -f'
alias pr='podman run --http-proxy=false'
alias dr='docker run --http-proxy=false'

# Utilities
alias less='less -NF '
alias aria2c='aria2c -x8 -s8 -j8 '

# git
alias g='git'
